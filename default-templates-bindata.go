// Code generated by go-bindata.
// sources:
// templates/default.html
// templates/detailed.html
// templates/fancy.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDefaultHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\xc1\x6a\xc4\x20\x10\x86\xcf\xe6\x29\xa6\xfb\x00\x91\x5c\x97\xa9\x97\xbd\x96\xd2\x57\x30\x71\x12\x5d\x12\x0d\x66\xa4\x2c\xc1\x77\x2f\xc6\x2d\xa4\x3d\xef\x69\x86\xf9\x7f\xbe\x5f\xf9\xf1\xcd\x84\x81\x1f\x2b\x81\xe5\x65\x56\x0d\xd6\x21\xd0\x92\x36\x65\xca\xdf\xa5\x0f\xe6\xa1\x1a\x21\xd0\x76\xea\xc3\x6d\x0c\x61\x84\xb0\x92\x87\x2d\xa4\x38\x10\x0c\xc1\x73\x74\x7d\x62\x17\xfc\x86\xd2\x76\x87\x39\x15\x98\xd8\x77\x88\xda\x4f\x04\xed\xed\xec\x82\x9c\x1b\x71\xa8\x6e\x84\x89\x8b\x9a\x3c\x43\xf7\xbc\x0b\x9c\x9d\xda\x77\x68\xbf\x62\xb8\xd3\xc0\xed\xa7\x5e\x08\x72\xbe\x42\x39\x56\x6f\xce\xff\x83\x67\xa7\x9e\x50\x9a\x37\x7a\x15\xca\x9b\x4a\x3a\xef\x28\xeb\xef\xd0\xa9\x5b\x24\xcd\x64\x20\xf8\x02\x5c\x13\x1b\xcd\x85\x0f\xdf\x8e\x2d\xa0\x06\x1b\x69\x7c\xbf\x58\xe6\x75\xbb\x4a\x39\x39\xb6\xa9\x6f\x87\xb0\xc8\x7b\xea\xf5\x6c\xe5\x74\x4e\xbe\xa8\xe9\xef\x43\xb4\x42\xe9\x8e\x36\x6a\x0b\x28\x6b\x4d\x3f\x01\x00\x00\xff\xff\xe9\x88\x50\x0d\xbe\x01\x00\x00")

func templatesDefaultHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesDefaultHtml,
		"templates/default.html",
	)
}

func templatesDefaultHtml() (*asset, error) {
	bytes, err := templatesDefaultHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/default.html", size: 446, mode: os.FileMode(420), modTime: time.Unix(1496954267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDetailedHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x93\xc1\x8e\xa3\x30\x0c\x86\xcf\xed\x53\x78\xfb\x00\x44\xbd\x56\xd9\x5c\xba\xc7\x6a\x77\x35\xd3\x79\x80\x00\x2e\x49\x05\x24\x4a\xcc\x8c\x10\xe2\xdd\x47\x21\x05\x85\x8a\xce\x09\xe3\x7c\xf9\xff\xc4\xb1\xf9\xaf\xd2\x14\xd4\x5b\x04\x45\x4d\x2d\xf6\x3c\x7e\x76\x5c\xa1\x2c\xc3\x97\xcd\x41\x6e\xca\x5e\xec\x77\x3b\xae\x8e\xe2\xa2\x3d\x81\xb9\x41\xd3\x83\xb1\xd8\x82\x37\x9d\x2b\x10\x0a\xd3\x92\xd3\x79\x47\xda\xb4\x9e\x33\x75\x9c\x78\x2b\xb8\x16\xff\x3e\xd1\xc9\xba\x86\x61\x80\xec\xbd\x6b\x1a\xe9\xfa\xec\x6a\x48\xd6\xe7\x74\x0f\x8c\xe3\x5a\x04\x74\xbb\xda\xf2\xdf\x99\x3b\x16\x74\x36\x5d\x4b\x01\xb6\xf1\xdf\x73\xa6\x05\x67\x36\xf8\x0d\x03\x38\xd9\x56\x08\xd9\xb3\x74\x5c\xd4\x37\x98\x65\xb2\x8f\xb7\x4b\xcc\xf3\x5c\x70\x09\xca\xe1\xed\xf7\x21\xf8\xad\x81\x83\x48\x73\x7f\x65\x83\x30\x8e\x9c\x49\xc1\x59\xfe\xb0\xc4\xda\xe3\x22\xb5\x49\x2f\x64\x5b\x46\x30\xa0\x8e\x89\x29\x7a\x3a\xd7\x1f\xf4\x85\xd3\x36\x1c\x7c\x66\x53\xcd\x8d\xe5\x95\x54\x62\x11\x85\x2b\x0a\xd5\x08\x35\x3b\xce\x0b\x93\xe0\x52\xc7\x55\xd1\x17\x99\xe5\x4e\x3f\xe1\x1b\xa6\x2f\xef\x75\x95\x95\x9f\xa1\x10\x9f\x66\xe8\xf1\x62\x5b\x5c\x30\x4e\xe2\x57\x36\x1b\xf9\x34\xcb\xb5\x38\x3b\x94\x84\x25\x98\xa9\xa5\x6c\x47\xa5\xa4\x70\x3f\xf8\xd2\xa4\x60\x79\x7e\x45\x64\xfd\x89\xb1\x4a\x93\xea\xf2\xac\x30\x0d\xbb\x77\xb9\xac\x15\xab\xd2\x22\x1d\x44\xb5\xee\xf6\xd0\x0d\x7a\x9a\x98\x38\x29\x9c\xc5\x51\xfa\x0e\x00\x00\xff\xff\xe0\xd3\x08\xa6\x62\x03\x00\x00")

func templatesDetailedHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesDetailedHtml,
		"templates/detailed.html",
	)
}

func templatesDetailedHtml() (*asset, error) {
	bytes, err := templatesDetailedHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/detailed.html", size: 866, mode: os.FileMode(420), modTime: time.Unix(1497348840, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFancyHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5f\x6f\xe3\xb8\x11\x7f\xcf\xa7\x98\x73\x51\xa0\x5d\x50\x96\xbd\xb9\x0d\x6e\x1d\xd9\x28\x90\x4b\xdb\x87\xb6\x7b\xb8\xcb\x3d\xf4\x91\x12\x47\x12\x63\x8a\xd4\x91\x94\x1d\x5f\x90\xef\x5e\x50\x92\x6d\xfd\x77\x12\xb4\xbd\x05\x5a\x3f\x9c\x2e\x9a\x99\xdf\x0c\x7f\xf3\x87\x14\x37\xf8\xe6\xfb\x2f\x77\x0f\xff\xfc\xe1\x1e\x52\x9b\x89\xcd\x55\x70\x7c\x20\x65\x9b\x2b\x00\x80\x20\x43\x4b\x21\x4a\xa9\x36\x68\xd7\xb3\x9f\x1f\xfe\xec\x7d\x37\xf3\x9b\x32\x49\x33\x5c\xcf\x76\x1c\xf7\xb9\xd2\x76\x06\x91\x92\x16\xa5\x5d\xcf\xf6\x9c\xd9\x74\xcd\x70\xc7\x23\xf4\xca\x3f\x08\x70\xc9\x2d\xa7\xc2\x33\x11\x15\xb8\x5e\xce\x17\xb3\x1a\xca\xd8\x83\x40\xb0\x87\x1c\xd7\x33\x8b\x4f\xd6\x8f\x8c\xa9\x65\xee\xe7\xe2\x22\x10\x2a\x76\x20\xc0\xf8\x8e\x80\xc9\xa9\x24\x40\xf3\x5c\xa0\x25\xa0\xc2\x47\x8c\x2c\x01\x1e\x6b\x9a\x21\x39\x9b\x2d\x09\xa4\x1f\x09\xa4\xd7\x04\xd2\x6f\x09\xa4\x9f\x08\xa4\x37\x04\x72\x02\xa1\x50\xd1\xf6\x97\x42\x59\x24\x90\xeb\x86\x0d\x25\x40\xc3\x50\x13\xa0\x91\x56\xf2\x90\x11\xa0\x8c\x69\x34\x86\x40\xc8\x13\x02\x11\x77\x26\x91\x62\x0d\x1b\x86\x82\x00\x8b\x25\x01\xcc\x08\xf0\x2c\x71\x2b\x35\x04\xb6\x21\x23\xf0\x0b\x01\x43\xc0\xd0\x2c\x3f\x1b\x98\x8c\x0a\x41\xc0\x58\xcd\xb7\x58\x3e\x95\x4c\x08\x98\x22\x74\xff\xc9\x09\x58\x4b\x60\x47\xf5\xd9\x22\x24\x50\x10\xe0\x04\x22\x94\x16\x1b\x02\xe6\x5c\x5b\x02\x8c\x11\x50\x82\x40\x21\x08\x08\x7e\x96\xc7\x1c\x05\x33\x8e\xa5\x58\xe9\x8c\x80\xa0\xa1\x8b\x56\x60\x82\x92\x9d\xd5\x2c\x0d\x85\x5b\x17\xcd\x2d\x57\x92\x80\xad\xc8\xb6\xb1\x52\x96\x80\x75\x15\x41\xc0\x6a\xf7\xbf\x04\x6c\xc3\x90\x6a\xcb\x23\x67\x4a\x0d\x67\x25\x82\xdc\x51\x43\x80\xa1\xa5\x5c\x18\x47\x49\x88\xac\x19\x4f\x52\x68\x24\xee\x79\x72\xe6\x9c\xa0\x26\xe0\xbc\x94\xcf\x44\xab\xa2\x41\x57\x86\xb2\x20\x20\xe9\x8e\x80\x2a\x6c\x5e\x58\x02\xba\x08\x0f\x04\x0c\x46\x15\x82\x29\xb2\x8c\xea\x43\x63\x3d\x3c\x43\x02\x19\xd5\x5b\x02\xb4\x60\x5c\x11\xd8\x71\x86\x0a\x9e\x4f\x2a\x25\x32\xd5\x09\x97\x2b\x58\xdc\xb6\x5e\xe7\x94\x31\x2e\x93\xde\xfb\x50\x69\x86\xba\xf5\xfa\xe5\xea\x9c\x23\xc5\x0e\x1d\xfc\x58\x49\xeb\x19\xfe\x2b\xae\x60\x79\x93\x3f\xdd\xf6\x85\x31\xcd\xb8\x38\xac\xc0\x50\x69\x3c\x83\x9a\xc7\x6d\x25\xc1\x25\x7a\x29\xf2\x24\xb5\x2b\x58\xce\x3f\xb5\xa5\x65\x5f\xad\x60\xb9\x58\xfc\x7e\x30\xa4\xaa\x22\x3a\x41\x09\x6e\xac\x57\x76\xdc\x0a\xa4\x92\x38\x68\xf9\xa1\x63\xe4\xed\x31\xdc\x72\xeb\x85\xea\xc9\x2d\xa8\x64\xa7\xa2\xc3\xbd\xea\xd2\x34\xad\xd3\x70\x43\x3b\x6e\x5c\xf3\x7b\x0c\x23\xa5\xa9\xcb\x6c\x37\x40\xf7\x8b\x94\x50\x7a\x05\xa1\xa0\xd1\x76\x18\x73\x95\xaa\x1d\xea\x0e\x72\x54\x68\xe3\xec\x72\xc5\x5d\x07\x0d\x5a\xfa\x1f\xe0\x4e\x49\x4b\xb9\x44\x6d\xe0\x83\x7f\x12\xcc\xa3\xe3\xeb\x0e\x2a\xe3\x26\x17\xf4\xb0\x6a\xf2\x73\x3b\xa2\x91\x19\x2f\x16\xf8\x34\xae\xe1\xa4\xb7\xa3\xac\x2b\xcd\x51\xda\x15\xec\xd0\xb5\x1c\x15\xe3\x9a\x8c\xeb\xaa\x31\x1c\x7d\x3a\xeb\xa9\xd6\x81\x78\xb1\x50\xfb\x95\xe3\xb3\xc8\x64\xa7\x34\xa7\xc5\x4d\x67\x54\xf0\x44\xae\xea\xb9\x34\xe2\x68\x42\xa7\x14\x79\xdc\x62\x66\x86\x15\x2e\x95\xf8\x3c\xa2\x9a\x19\xef\x2b\x48\x50\x4e\xa3\xed\x05\x22\xc6\x55\x1e\x0b\x63\x79\x7c\xf0\xea\xfd\xf3\x7d\x5c\xb8\xfa\x75\x6c\xb4\x4b\xb7\x7c\xf3\xff\xb2\x3d\xd1\x77\xfd\x71\x91\x0f\x4f\xa3\x92\xab\x0e\x55\xa7\xbd\xa0\x6d\x05\x8d\xed\x60\x99\x3f\x81\x51\x82\x33\x10\x6e\x4e\x27\x9a\x1e\x86\x14\x3d\x4d\x19\x2f\x8c\xcb\x9f\x43\x1a\xd8\x88\x3c\xab\xf2\xa3\x78\x20\xbc\x3f\x65\xc8\x38\x05\x13\x69\x44\x09\x54\x32\xf8\x43\xc6\xa5\x57\x2f\xeb\xdb\x9b\x45\xfe\xf4\xc7\x4e\xf4\x83\xd9\x1f\x4b\x51\xaa\x34\xff\xd5\xf5\x51\x87\xf9\x37\x26\x6a\x20\x59\x5a\xed\x61\xaf\x69\xde\x57\x1c\x54\x6a\x69\xbd\x5c\xf5\x57\x34\xb4\xa0\x53\x8f\x69\x8c\x51\x6b\x64\xf5\xc6\x7b\xdd\x4f\xdc\xc9\x71\x48\x0d\x37\xa3\x2a\xc7\xd3\xc1\xb2\x27\x7d\x79\x7b\x7a\x6e\xbe\x7b\x53\x7a\xc6\x56\x53\xc2\x4c\xaf\x66\x40\xe5\x1d\xf1\x2e\x17\x1f\xff\x2d\x01\x57\x38\xd3\x11\x0f\xe9\xbc\x27\xe4\xeb\xb7\xb5\xc0\x68\xc8\x25\xce\x85\x90\x07\x74\x06\x43\xae\x67\x72\x79\xb0\x40\x69\x7b\xa3\xf9\x7f\x7e\x32\xf7\xe6\xef\xbc\xfa\x0e\xf8\xed\x89\x19\x9b\x87\xef\xa7\x46\xab\xfd\x28\x2f\x2d\xd9\x28\x29\x3c\x4b\x3a\xc4\x9c\x0f\x05\xdd\x7a\x3c\x7d\x36\x2c\xa6\x37\xbc\x23\xf6\xdc\x72\x2b\x70\xf0\x13\xc9\x13\x18\xdb\x89\xad\xa9\x06\xaa\x4f\x2f\xc3\x10\x6f\xdf\xdc\xe8\xd3\xb1\xb5\xaf\x97\x9f\x47\x3a\x7b\xa4\x5c\xc6\x72\x3a\x5c\xec\x5d\xed\xb7\xef\x70\x43\x45\x0f\x97\x8f\x24\x83\x9b\xdb\x64\x3e\x7a\x39\x59\xbc\x62\x08\xcd\x2d\x4d\xbe\x82\x33\xe0\x7f\xa4\xa1\x06\x0e\x16\x17\x15\x5e\x55\x91\x8e\xb4\x55\xcc\xb5\xb1\x5e\x94\x72\xd1\x9d\xd4\x63\x49\xe8\x20\x4c\xdc\x08\x5c\xf7\x0e\x94\x34\xda\x26\x5a\x15\x92\x79\xf5\x57\xee\xef\x3e\x33\xfa\x39\x5c\x4e\x1e\x27\x3f\x75\x61\x4e\x47\xd6\x9e\xa4\x15\xf3\xa7\x91\x75\x57\xd7\x31\xbf\x7d\xb5\x7c\x05\x5f\x0c\xff\xad\x0f\xdd\xaa\x69\x03\xbf\xbc\x95\xa9\xef\x44\xcb\xe6\xdf\xfc\xfd\x00\x2a\x47\x09\x46\x15\x3a\xc2\xf2\x7a\x55\xf3\xb0\x70\x8b\x36\x81\x5f\xe9\x5c\x05\x7e\x75\x65\x1b\x84\x8a\x1d\x36\x57\x57\x01\xe3\x3b\x88\x04\x35\x66\x3d\x3b\x7d\x18\x1f\xef\x5a\xd3\xe5\x05\xd0\x74\x59\x6b\xf2\x4d\x90\x6f\x02\xbe\xf9\xb2\x43\x4d\x85\x80\xe7\x67\x98\xff\x54\xdd\xb4\xcd\x1f\x94\xa5\xe2\xae\x69\x08\x2f\x2f\x6d\x24\xe0\xb2\x65\xf2\x83\x56\x8f\x18\xd9\x3b\x55\x48\xeb\x94\xf3\xea\x6f\x13\xf8\x7c\x13\xf8\xf9\xc6\x3d\x2b\xc7\xcd\xf0\xdb\x5f\xf7\x8d\x4b\xe1\xa0\x10\x2d\xa5\x86\xc8\xfd\x9e\x9f\x41\x53\x99\x20\xcc\xbb\x51\xb6\xd4\x02\xc1\x9b\x28\x1d\x90\x6e\x34\xd5\x60\x1e\x50\x2a\x15\xbf\xf1\xbc\xc0\xed\xcf\x46\x47\xeb\xd9\xcf\x3f\xfe\x0d\xfe\xf2\xe5\xfe\x27\xf8\xeb\xfd\x8f\xf7\xb3\x8d\xe7\x8d\x18\xd5\x77\x98\x47\x0f\x65\x46\x47\x1c\x54\xe9\xfb\x38\x2e\xac\xd7\xcd\x63\x38\x92\x3d\x77\x61\x74\x96\xdc\x83\xa4\x90\x6a\x8c\xd7\x33\x97\xac\xb6\xdd\x6c\xd3\x7c\xf7\x0f\x9a\x21\xbc\xbc\x04\x3e\xbd\x18\x02\x0a\x83\x17\xfd\x86\xc3\xe8\xe1\x65\x74\xc9\xa6\xc0\x03\x7f\x8a\xa4\x8a\xa0\xc4\xba\xc2\x70\x95\xb8\x9c\x84\xc2\xac\x0c\xf2\x54\xb4\x9d\x5e\xc1\x6c\xd2\xd1\x25\x1a\x26\xe1\x2f\xa3\x8f\xd3\x10\xf8\x75\x5d\x0d\xd4\xb3\xcf\xf8\xae\xff\xba\x53\x37\xdf\xa3\x89\x34\x2f\x2f\xe8\x87\x7c\x74\x27\x0c\x4a\x3b\xd6\x15\x79\x2b\xcb\x6d\x5c\xd7\xf6\x6f\x08\x70\x64\xc1\x9d\xd0\x1f\xdc\x59\x67\x8c\x97\xf3\xd0\x70\x47\xa2\x89\x46\x3b\xcf\x8f\xd7\xe0\x42\x7b\x94\x58\x9a\x54\xad\x53\xae\x51\xf0\xf7\xa7\xb1\x10\xaf\x65\xa2\xef\xa7\xaf\x77\xc6\xab\x49\x3e\x3e\xaa\x3d\xff\x34\xf7\xef\x34\x52\x8b\x0c\x54\x39\xc1\xf3\xc2\x32\x6a\x5d\x21\xc3\x9e\xdb\xf4\x3c\x30\x52\x6b\x73\xb3\xf2\xfd\x84\xdb\xb4\x08\xe7\x91\xca\xfc\xc7\x22\xa4\x22\xf5\x93\x66\x9b\xcc\x36\x49\xbb\x6b\x68\x35\xeb\x03\xff\xe8\x36\xf0\xab\x9d\x2b\xf0\xab\x7f\x82\xfc\x57\x00\x00\x00\xff\xff\x44\x88\x25\x69\x9a\x1c\x00\x00")

func templatesFancyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFancyHtml,
		"templates/fancy.html",
	)
}

func templatesFancyHtml() (*asset, error) {
	bytes, err := templatesFancyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/fancy.html", size: 7322, mode: os.FileMode(420), modTime: time.Unix(1497388161, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/default.html":  templatesDefaultHtml,
	"templates/detailed.html": templatesDetailedHtml,
	"templates/fancy.html":    templatesFancyHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"default.html":  &bintree{templatesDefaultHtml, map[string]*bintree{}},
		"detailed.html": &bintree{templatesDetailedHtml, map[string]*bintree{}},
		"fancy.html":    &bintree{templatesFancyHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
