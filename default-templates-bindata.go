// Code generated by go-bindata.
// sources:
// templates/default.html
// templates/detailed.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDefaultHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x91\xc1\x6e\xc3\x20\x0c\x86\xcf\xdd\x53\x78\x7d\x80\xa0\x5c\x2b\xc6\xa5\xd7\x69\xda\x2b\x90\xe0\x04\xaa\x04\x47\xc4\x68\xaa\xaa\xbc\xfb\x4c\xe8\xa4\x6c\xe7\x9d\x6c\xfc\xdb\x9f\x81\x5f\xbf\x3a\xea\xf9\xbe\x20\x78\x9e\x27\xf3\xa2\x6b\x38\x69\x8f\xd6\x95\xa8\x7e\x92\x8e\xdc\x5d\xa2\x28\xad\x79\x0f\x2b\x03\x0d\x40\x0b\x46\x58\x29\xa7\x1e\xa1\xa7\xc8\x29\x74\x99\x03\xc5\x55\xc6\xda\xbd\x39\x17\xd8\xe9\xf1\x80\x64\xe3\x88\xd0\x5c\x8f\x5d\xb0\x6d\x22\x16\x35\x0c\x30\x72\x51\x73\x64\x68\x9f\xf5\x93\x9e\x82\x11\xb1\xf9\x4c\x74\xc3\x9e\x9b\x0f\x3b\xa3\x68\x17\x28\xc5\xda\xbb\x6d\x7f\x17\xcb\xcc\x13\x8a\xd3\x8a\xff\x85\x8a\xae\x92\x8e\xb9\x56\xf5\x75\x3a\x98\x6b\x42\xcb\xe8\x80\x62\x01\x2e\x99\x9d\x1c\x0b\xf1\x2b\xb0\x07\x6d\xc1\x27\x1c\xde\xce\x9e\x79\x59\x2f\x4a\x8d\x52\xcd\x5d\xd3\xd3\xac\x6e\xb9\xb3\x93\x57\xe3\x71\xf3\xd9\x8c\xbf\x2f\x62\x8d\x56\x61\x77\xa3\xba\x20\xdf\xbb\xdb\xf4\x1d\x00\x00\xff\xff\xe9\x88\x50\x0d\xbe\x01\x00\x00")

func templatesDefaultHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesDefaultHtml,
		"templates/default.html",
	)
}

func templatesDefaultHtml() (*asset, error) {
	bytes, err := templatesDefaultHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/default.html", size: 446, mode: os.FileMode(420), modTime: time.Unix(1470044176, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDetailedHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x52\xc1\x6e\xeb\x20\x10\x3c\xbf\xf7\x15\xdb\x7c\x80\x51\xae\x15\xe5\x92\x1e\xa3\xaa\xaa\xd4\x0f\xc0\xb0\x31\x44\x09\x58\xb0\xa8\x8a\x22\xff\x7b\xc1\xd4\x2e\x89\xa2\x9e\x76\xbd\x33\x9e\x1d\x60\xf8\x93\xf6\x8a\x2e\x23\x82\xa1\xf3\x49\xfc\xe7\xb5\xfc\xe3\x06\xa5\x2e\x95\x2d\x4d\xef\xf5\x25\xd7\x8c\x6c\xc5\xde\x46\x02\x7f\x00\x3f\xa2\x83\xe8\x53\x50\x08\xca\x3b\x0a\xb6\x4f\x64\xbd\x8b\xf9\xb7\x6d\x21\x5f\xaf\x10\xa4\x1b\x10\xba\x5d\x0b\xc3\x34\x55\xd0\x1e\xa0\x7b\x0f\xfe\x88\x8a\xba\xcf\x8f\x7d\x9d\xf3\x5e\x70\x09\x26\xe0\xe1\x65\x93\x39\x77\x84\x8d\x68\x67\x6f\xf2\x8c\x79\xc8\x99\x14\x9c\xf5\x3f\x2b\xf1\x14\x71\x95\x7a\xc8\x5e\x99\x4e\x57\x62\xa1\x06\x26\xe6\xee\xce\xd7\x2b\x46\x15\xec\x58\x8c\x2f\xdc\x56\xf3\x01\x7c\x23\xd5\xac\xa8\xc2\x03\x95\xdb\x48\x8e\x60\xbb\x00\xb3\x60\x9d\x4d\xd3\xed\x4d\xae\x32\xeb\x99\xfe\xa2\x3f\x58\xfa\x6b\x66\xe9\x5a\x9c\x5b\xb1\x0b\x28\x09\x35\x64\xff\x19\x19\x13\xe9\xfc\x59\x84\xbf\x2c\x19\x58\x5f\xc2\x10\x8d\xf1\x99\xb1\x21\x4f\x53\xdf\x29\x7f\x66\xc7\xd4\xcb\x93\x61\x43\xeb\x77\x23\x86\xdb\x20\x94\x87\xb1\x73\x92\x6a\x82\x72\x34\xe6\x88\x7d\x07\x00\x00\xff\xff\xa5\xc5\xff\x3b\x7a\x02\x00\x00")

func templatesDetailedHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesDetailedHtml,
		"templates/detailed.html",
	)
}

func templatesDetailedHtml() (*asset, error) {
	bytes, err := templatesDetailedHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/detailed.html", size: 634, mode: os.FileMode(420), modTime: time.Unix(1470044114, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/default.html": templatesDefaultHtml,
	"templates/detailed.html": templatesDetailedHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"default.html": &bintree{templatesDefaultHtml, map[string]*bintree{}},
		"detailed.html": &bintree{templatesDetailedHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

