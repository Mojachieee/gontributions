// Code generated by go-bindata.
// sources:
// templates/default.html
// templates/detailed.html
// templates/fancy.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDefaultHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x91\xc1\x6a\xc4\x20\x10\x86\xcf\xe6\x29\xa6\xfb\x00\x91\x5c\x97\xa9\x97\xbd\x96\xd2\x57\x30\x71\x12\x5d\x12\x0d\x66\xa4\x2c\xc1\x77\x2f\xc6\x2d\xa4\x3d\xef\x69\x86\xf9\x7f\xbe\x5f\xf9\xf1\xcd\x84\x81\x1f\x2b\x81\xe5\x65\x56\x0d\xd6\x21\xd0\x92\x36\x65\xca\xdf\xa5\x0f\xe6\xa1\x1a\x21\xd0\x76\xea\xc3\x6d\x0c\x61\x84\xb0\x92\x87\x2d\xa4\x38\x10\x0c\xc1\x73\x74\x7d\x62\x17\xfc\x86\xd2\x76\x87\x39\x15\x98\xd8\x77\x88\xda\x4f\x04\xed\xed\xec\x82\x9c\x1b\x71\xa8\x6e\x84\x89\x8b\x9a\x3c\x43\xf7\xbc\x0b\x9c\x9d\xda\x77\x68\xbf\x62\xb8\xd3\xc0\xed\xa7\x5e\x08\x72\xbe\x42\x39\x56\x6f\xce\xff\x83\x67\xa7\x9e\x50\x9a\x37\x7a\x15\xca\x9b\x4a\x3a\xef\x28\xeb\xef\xd0\xa9\x5b\x24\xcd\x64\x20\xf8\x02\x5c\x13\x1b\xcd\x85\x0f\xdf\x8e\x2d\xa0\x06\x1b\x69\x7c\xbf\x58\xe6\x75\xbb\x4a\x39\x39\xb6\xa9\x6f\x87\xb0\xc8\x7b\xea\xf5\x6c\xe5\x74\x4e\xbe\xa8\xe9\xef\x43\xb4\x42\xe9\x8e\x36\x6a\x0b\x28\x6b\x4d\x3f\x01\x00\x00\xff\xff\xe9\x88\x50\x0d\xbe\x01\x00\x00")

func templatesDefaultHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesDefaultHtml,
		"templates/default.html",
	)
}

func templatesDefaultHtml() (*asset, error) {
	bytes, err := templatesDefaultHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/default.html", size: 446, mode: os.FileMode(420), modTime: time.Unix(1470044176, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDetailedHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x53\xcd\x6e\xdb\x30\x0c\x3e\x3b\x4f\xc1\xe5\x01\x2c\xe4\x5a\x70\xba\x64\xc7\x62\x1b\xba\xee\x01\x24\x9b\xb1\x54\x58\x96\x20\xd1\x1b\x82\x20\xef\x3e\xc8\x8e\x0d\xab\x73\x7b\x32\x45\x7e\xfc\x3e\xf3\x0f\xbf\xb4\xbe\xe1\x6b\x20\x30\xec\x7a\x79\xc0\xf9\x53\xa1\x21\xd5\xe6\xaf\x58\x0c\xed\xdb\xab\x3c\x54\x15\x9a\x93\x7c\xb6\x89\xc1\x5f\xc0\x5d\xc1\x07\x1a\x20\xf9\x31\x36\x04\x8d\x1f\x38\x5a\x3d\xb2\xf5\x43\x42\x61\x4e\x13\x3e\x48\xb4\xf2\xc7\x1f\x8a\xaa\xef\xe1\x76\x83\xfa\xd7\xe8\x9c\x8a\xd7\xfa\xd5\xb3\xea\xcf\xdb\x1c\xb8\xdf\x4b\x12\xb0\x43\x91\xf2\x33\xfa\x37\x6a\xf8\xec\xc7\x81\x33\x38\xcc\xef\x84\xc2\x4a\x14\x21\xeb\xdd\x6e\x10\xd5\xd0\x11\xd4\xef\xa9\xe7\xa0\xbd\xc0\x42\x53\xff\x7e\x79\x9e\xfd\xa8\x25\x2a\x30\x91\x2e\x5f\x8f\x59\xaf\x04\x1c\xe5\xd6\xf7\x5d\x39\x82\xfb\x1d\x85\x92\x28\xf4\x43\x92\xfa\x44\x2b\xd5\x2e\x5a\xcb\xc3\xff\x3f\xf0\xe2\xfb\x47\x5a\x85\xe4\x8a\xc4\x47\x08\x05\xb9\x45\x63\x68\x33\xb6\x78\x54\x39\x53\x47\x21\x27\xeb\x1d\xfb\x37\x4a\x4d\xb4\x21\xd7\xbf\x60\xb7\x0a\x3b\xe1\x82\x6a\x23\x31\x13\x77\x9c\x9b\x9a\x5b\x7f\x5a\x02\x13\xe1\x3a\x8e\x62\x76\x2b\xcd\xda\x9a\xcf\xe0\x3b\xa2\x1f\xd6\xf5\xaa\xba\xb4\x80\xb2\xfd\xb4\x80\x1e\x83\xdf\xc3\x65\xe1\x8d\xfd\x91\xcc\x8e\x7f\xeb\x45\x2b\xcf\x91\x14\x53\x0b\x7e\xda\xcc\x30\x72\xab\x38\xd7\x07\x7f\x2d\x1b\x58\xb7\xc8\x30\x87\xf4\x24\x44\x67\xd9\x8c\xba\x6e\xbc\x13\x6f\xa3\x56\xbd\x11\xdd\xb6\x49\x47\xd9\x95\x47\x93\x97\xca\x4e\x87\x37\x1f\x1c\x8a\xf9\x22\xff\x05\x00\x00\xff\xff\xa6\xea\x6a\x34\xa9\x03\x00\x00")

func templatesDetailedHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesDetailedHtml,
		"templates/detailed.html",
	)
}

func templatesDetailedHtml() (*asset, error) {
	bytes, err := templatesDetailedHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/detailed.html", size: 937, mode: os.FileMode(420), modTime: time.Unix(1498057604, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFancyHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x59\x5b\x6f\xe3\xb8\x15\x7e\xcf\xaf\x38\xeb\xa2\x40\x3b\xa0\x2c\x3b\xd9\x04\x3b\x8e\x6c\x14\xc8\xa6\xed\x43\xdb\x59\xcc\x64\x1e\xfa\x48\x89\xc7\x12\x63\x8a\xd4\x90\x94\x1d\x4f\x90\xff\x5e\x50\x92\x6d\xdd\x3d\x09\xda\xce\x00\xad\x1f\x56\x1b\x9e\x2b\xbf\x73\xe1\x21\x27\xf8\xe9\xd7\x0f\x77\x0f\xff\xfc\xed\x1e\x12\x9b\x8a\xd5\x45\x70\xf8\x20\x65\xab\x0b\x00\x80\x20\x45\x4b\x21\x4a\xa8\x36\x68\x97\x93\xcf\x0f\x7f\xf6\x7e\x99\xf8\x75\x9a\xa4\x29\x2e\x27\x5b\x8e\xbb\x4c\x69\x3b\x81\x48\x49\x8b\xd2\x2e\x27\x3b\xce\x6c\xb2\x64\xb8\xe5\x11\x7a\xc5\x1f\x04\xb8\xe4\x96\x53\xe1\x99\x88\x0a\x5c\xce\xa7\xb3\x49\xa5\xca\xd8\xbd\x40\xb0\xfb\x0c\x97\x13\x8b\x4f\xd6\x8f\x8c\xa9\x68\xee\xe7\xfc\x22\x10\x2a\xb6\x27\xc0\xf8\x96\x80\xc9\xa8\x24\x40\xb3\x4c\xa0\x25\xa0\xc2\x47\x8c\x2c\x01\xbe\xd6\x34\x45\x72\x12\x9b\x13\x48\x2e\x09\x24\x57\x04\x92\x9f\x09\x24\xd7\x04\x92\x1b\x02\x19\x81\x50\xa8\x68\xf3\x25\x57\x16\x09\x64\xba\x26\x43\x09\xd0\x30\xd4\x04\x68\xa4\x95\xdc\xa7\x04\x28\x63\x1a\x8d\x21\x10\xf2\x98\x40\xc4\x9d\x48\xa4\x58\x4d\x86\xa1\x20\xc0\xd6\x92\x00\xa6\x04\x78\x1a\xbb\x9d\x1a\x02\x9b\x90\x11\xf8\x42\xc0\x10\x30\x34\xcd\x4e\x02\x26\xa5\x42\x10\x30\x56\xf3\x0d\x16\x5f\x25\x63\x02\x26\x0f\xdd\x7f\x32\x02\xd6\x12\xd8\x52\x7d\x92\x08\x09\xe4\x04\x38\x81\x08\xa5\xc5\x1a\x81\x39\xd3\x96\x00\x63\x04\x94\x20\x90\x0b\x02\x82\x9f\xe8\x6b\x8e\x82\x19\x87\xd2\x5a\xe9\x94\x80\xa0\xa1\xf3\x56\x60\x8c\x92\x9d\xd8\x2c\x0d\x85\xdb\x17\xcd\x2c\x57\x92\x80\x2d\xc1\xb6\x6b\xa5\x2c\x01\xeb\x32\x82\x80\xd5\xee\x7f\x09\xd8\x9a\x20\xd5\x96\x47\x4e\x94\x1a\xce\x0a\x0d\x72\x4b\x0d\x01\x86\x96\x72\x61\x1c\x24\x21\xb2\xba\x3f\x71\xae\x91\xb8\xef\xd1\x98\x33\x82\x9a\x80\xb3\x52\x7c\x63\xad\xf2\x1a\x5c\x29\xca\x9c\x80\xa4\x5b\x02\x2a\xb7\x59\x6e\x09\xe8\x3c\xdc\x13\x30\x18\x95\x1a\x4c\x9e\xa6\x54\xef\x6b\xfb\xe1\x29\x12\x48\xa9\xde\x10\xa0\x39\xe3\x8a\xc0\x96\x33\x54\xf0\x7c\x64\x29\x34\x53\x1d\x73\xb9\x80\xd9\x6d\x63\x39\xa3\x8c\x71\x19\x77\xd6\x43\xa5\x19\xea\xc6\xf2\xcb\xc5\x29\x46\x8a\xed\x5b\xfa\xd7\x4a\x5a\xcf\xf0\xaf\xb8\x80\xf9\x4d\xf6\x74\xdb\x25\xae\x69\xca\xc5\x7e\x01\x86\x4a\xe3\x19\xd4\x7c\xdd\x64\x12\x5c\xa2\x97\x20\x8f\x13\xbb\x80\xf9\xf4\xba\x49\x2d\xea\x6a\x01\xf3\xd9\xec\xf7\xbd\x2e\x95\x19\xd1\x72\x4a\x70\x63\xbd\xa2\xe2\x16\x20\x95\xc4\x5e\xc9\x77\x2d\x21\x6f\x87\xe1\x86\x5b\x2f\x54\x4f\x6e\x43\x05\x3a\x25\x1c\x6e\xa9\x0d\xd3\x38\x4f\xcd\x0c\x6d\x99\x71\xc5\xef\x31\x8c\x94\xa6\x2e\xb2\x6d\x07\xdd\x2f\x52\x42\xe9\x05\x84\x82\x46\x9b\x7e\x9d\x8b\x44\x6d\x51\xb7\x34\x47\xb9\x36\x4e\x2e\x53\xdc\x55\x50\xaf\xa4\xff\x0e\xee\x94\xb4\x94\x4b\xd4\x06\xde\xf9\x47\xc2\x34\x3a\x2c\xb7\xb4\x32\x6e\x32\x41\xf7\x8b\x3a\x3e\xb7\x03\x1c\xa9\xf1\xd6\x02\x9f\x86\x39\x1c\xf5\x76\x10\x75\xa5\x39\x4a\xbb\x80\x2d\xba\x92\xa3\x62\x98\x93\x71\x5d\x16\x86\x83\x4f\xa7\x1d\xd6\xca\x11\x6f\x2d\xd4\x6e\xe1\xf0\xcc\x53\xd9\x4a\xcd\x71\x72\xdd\x18\x15\x3c\x96\x8b\xaa\x2f\x0d\x18\x1a\xe1\x29\x48\x1e\xb7\x98\x9a\x7e\x86\x73\x29\x3e\x8d\xa8\x66\xc6\xfb\x01\x02\x94\xd1\x68\x73\x06\x88\x61\x96\xc7\xdc\x58\xbe\xde\x7b\xd5\xf9\xf9\x36\x2c\x5c\xfe\x3a\x34\x9a\xa9\x5b\xac\xfc\x3f\x6d\x8f\xf0\x5d\x5d\xce\xb2\xfe\x6e\x54\x60\xd5\x82\xea\x78\x16\x34\xa5\xa0\x76\x1c\xcc\xb3\x27\x30\x4a\x70\x06\xc2\xf5\xe9\x58\xd3\x7d\x1f\xa3\xa7\x29\xe3\xb9\x71\xf1\x73\x9a\x7a\x0e\x22\xcf\xaa\xec\x40\xee\x71\xef\x4f\x29\x32\x4e\xc1\x44\x1a\x51\x02\x95\x0c\xfe\x90\x72\xe9\x55\xdb\xfa\xf9\x66\x96\x3d\xfd\xb1\xe5\x7d\x6f\xf4\x87\x42\x94\x28\xcd\xbf\xba\x3a\x6a\x21\xff\xca\x40\xf5\x04\x4b\xab\x1d\xec\x34\xcd\xba\x8c\xbd\x4c\x0d\xae\x97\x8b\xee\x8e\xfa\x36\x74\xac\x31\x8d\x6b\xd4\x1a\x59\x75\xf0\x5e\x75\x03\x77\x34\x1c\x52\xc3\xcd\x20\xcb\x61\x3a\x98\x77\xa8\x2f\xaf\x0f\xcf\xcd\x2f\xaf\x0a\xcf\xd0\x6e\x0a\x35\xe3\xbb\xe9\x61\x79\x83\xbf\xf3\xd9\xe5\xbf\xc5\xe1\x52\xcf\xb8\xc7\x7d\x3c\x6f\x71\xf9\xea\x75\x25\x30\xe8\x72\xa1\xe7\x8c\xcb\x3d\x3c\xbd\x2e\x57\x3d\xb9\x18\x2c\x50\xda\x4e\x6b\xfe\x9f\xef\xcc\x9d\xfe\x3b\x2d\xef\x01\xdf\x1f\x98\xa1\x7e\xf8\x76\x68\xb4\xda\x0d\xe2\xd2\xa0\x0d\x82\xc2\xd3\xb8\x05\xcc\x69\x28\x68\xe7\xe3\xf1\xda\x30\x1b\x3f\xf0\x0e\xba\xa7\x96\x5b\x81\xbd\x57\x24\x4f\xe0\xda\x8e\x1c\x4d\x95\x22\x86\x26\xd2\xbc\xb8\xd6\xf5\xab\x79\xfd\x01\x47\x9f\x0e\xe5\x7d\x35\x7f\x3f\x50\xdd\x03\x29\x33\x14\xd7\xfe\x84\x6f\x73\xbf\xfe\x94\xeb\x4b\x7c\x38\x3f\x96\xf4\x1e\x70\xa3\x31\xe9\xc4\x65\xf6\x0d\x8d\x68\x6a\x69\xfc\x03\xcc\x81\xff\x91\xa2\xea\x19\x2e\x46\x19\x5a\xb0\x8c\xdc\xda\xaf\x3a\x43\x1f\x8d\x36\xb1\x56\xb9\x64\x5e\x75\x13\xfd\xdd\x7b\x46\xdf\x87\xf3\xd1\x91\xef\xba\xad\xe6\x38\x56\x76\x28\x55\x60\x75\x59\xbb\x43\xe4\xa2\x90\xae\x07\xea\xa8\x7c\x50\xf9\xfe\xb1\xfe\x01\x66\xfe\xff\xd6\x55\xb5\x2c\xb9\xc0\x2f\xde\x55\xaa\x57\xcd\xa2\x74\x57\x7f\xdf\x83\xca\x50\x82\x51\xb9\x8e\xb0\x78\x20\xd5\x3c\xcc\xdd\xa6\x4d\xe0\x97\x3c\x17\x81\x5f\x3e\xba\x06\xa1\x62\xfb\xd5\xc5\x45\xc0\xf8\x16\x22\x41\x8d\x59\x4e\x8e\x57\xdb\xc3\x6b\x69\x32\x3f\xa3\x34\x99\x57\x9c\x7c\x15\x64\xab\x80\xaf\x3e\x6c\x51\x53\x21\xe0\xf9\x19\xa6\x9f\xca\xb7\xb2\xe9\x83\xb2\x54\xdc\xd5\x05\xe1\xe5\xa5\xa9\x09\xb8\x6c\x88\xfc\xa6\xd5\x23\x46\xf6\x4e\xe5\xd2\x3a\xe6\xac\xfc\xdb\x04\x3e\x5f\x05\x7e\xb6\x72\xdf\xd2\x70\xdd\xfd\xe6\xfd\xbc\xf6\xac\x1b\xe4\xa2\xc1\x54\x23\xb9\xdf\xf3\x33\x68\x2a\x63\x84\x69\xdb\xcb\x06\x5b\x20\x78\x5d\x4b\x4b\x49\xdb\x9b\xb2\xad\xf6\x30\x15\x8c\x3f\x79\x5e\xe0\x4e\x58\xa3\xa3\xe5\xe4\xf3\xc7\xbf\xc1\x5f\x3e\xdc\x7f\x82\xbf\xde\x7f\xbc\x9f\xac\x3c\x6f\x40\xa8\x7a\x85\x3c\x58\x28\x22\x3a\x60\xa0\x0c\xdf\xe5\x30\xb1\xda\x37\x5f\xc3\x01\xec\xa9\x73\xa3\xb5\xe5\x8e\x4a\x0a\x89\xc6\xf5\x72\xe2\x82\xd5\x94\x9b\xac\xea\x6b\xff\xa0\x29\xc2\xcb\x4b\xe0\xd3\xb3\x2e\xa0\x30\x78\xd6\x6e\xd8\xaf\x3d\x3c\xaf\x5d\xb2\x31\xe5\x81\x3f\x06\x52\x09\x50\x6c\x5d\x62\xb8\x4c\x9c\x8f\xaa\xc2\xb4\x70\xf2\x98\xb4\xad\x5a\xc1\x74\xd4\xd0\x39\x18\x46\xd5\x9f\xd7\x3e\x0c\x43\xe0\x57\x79\xd5\x93\xcf\x3e\xe3\xdb\xee\x72\x2b\x6f\x7e\xad\xcd\x62\x3d\x36\xea\x45\x51\x1b\xdb\x86\x2a\x23\x6b\x44\xba\xa9\xdb\x95\xfe\x2b\x9c\x1c\xd8\x74\xcb\xfd\x07\x37\xad\x0c\x61\x73\x6a\x1c\x6e\xa8\x19\x29\xb6\x53\x0f\xf9\x16\xbd\xd0\x6c\x27\x96\xc6\x65\xf9\x14\x7b\x14\xfc\xed\xa1\xcc\xc5\xb7\x22\xd1\xb5\xd3\xe5\x3b\xe9\xab\x40\x3e\x7c\xca\x73\xff\xd8\xfb\xef\x34\x52\x8b\x0c\x54\xd1\xc5\xb3\xdc\x32\x6a\x5d\x32\xc3\x8e\xdb\xe4\xd4\x34\x12\x6b\x33\xb3\xf0\xfd\x98\xdb\x24\x0f\xa7\x91\x4a\xfd\xc7\x3c\xa4\x22\xf1\xe3\x7a\xa9\x4c\x56\x71\xb3\x72\x68\xd9\xef\x03\xff\x60\x36\xf0\xcb\xd3\x2b\xf0\xcb\x7f\x48\xfc\x57\x00\x00\x00\xff\xff\x4d\xb2\x3b\xfd\x60\x1c\x00\x00")

func templatesFancyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFancyHtml,
		"templates/fancy.html",
	)
}

func templatesFancyHtml() (*asset, error) {
	bytes, err := templatesFancyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/fancy.html", size: 7264, mode: os.FileMode(420), modTime: time.Unix(1497468226, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/default.html": templatesDefaultHtml,
	"templates/detailed.html": templatesDetailedHtml,
	"templates/fancy.html": templatesFancyHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"default.html": &bintree{templatesDefaultHtml, map[string]*bintree{}},
		"detailed.html": &bintree{templatesDetailedHtml, map[string]*bintree{}},
		"fancy.html": &bintree{templatesFancyHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

