// Code generated by go-bindata.
// sources:
// templates/default.html
// templates/detailed.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDefaultHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x91\xc1\x6a\xc4\x20\x10\x86\xcf\xe6\x29\xa6\xfb\x00\x91\x5c\x97\xa9\x97\xbd\x96\xd2\x57\x30\x71\x12\x5d\x12\x0d\x66\xa4\x2c\xc1\x77\x2f\xc6\x2d\xa4\x3d\xef\x69\x86\xf9\x7f\xbe\x5f\xf9\xf1\xcd\x84\x81\x1f\x2b\x81\xe5\x65\x56\x0d\xd6\x21\xd0\x92\x36\x65\xca\xdf\xa5\x0f\xe6\xa1\x1a\x21\xd0\x76\xea\xc3\x6d\x0c\x61\x84\xb0\x92\x87\x2d\xa4\x38\x10\x0c\xc1\x73\x74\x7d\x62\x17\xfc\x86\xd2\x76\x87\x39\x15\x98\xd8\x77\x88\xda\x4f\x04\xed\xed\xec\x82\x9c\x1b\x71\xa8\x6e\x84\x89\x8b\x9a\x3c\x43\xf7\xbc\x0b\x9c\x9d\xda\x77\x68\xbf\x62\xb8\xd3\xc0\xed\xa7\x5e\x08\x72\xbe\x42\x39\x56\x6f\xce\xff\x83\x67\xa7\x9e\x50\x9a\x37\x7a\x15\xca\x9b\x4a\x3a\xef\x28\xeb\xef\xd0\xa9\x5b\x24\xcd\x64\x20\xf8\x02\x5c\x13\x1b\xcd\x85\x0f\xdf\x8e\x2d\xa0\x06\x1b\x69\x7c\xbf\x58\xe6\x75\xbb\x4a\x39\x39\xb6\xa9\x6f\x87\xb0\xc8\x7b\xea\xf5\x6c\xe5\x74\x4e\xbe\xa8\xe9\xef\x43\xb4\x42\xe9\x8e\x36\x6a\x0b\x28\x6b\x4d\x3f\x01\x00\x00\xff\xff\xe9\x88\x50\x0d\xbe\x01\x00\x00")

func templatesDefaultHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesDefaultHtml,
		"templates/default.html",
	)
}

func templatesDefaultHtml() (*asset, error) {
	bytes, err := templatesDefaultHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/default.html", size: 446, mode: os.FileMode(420), modTime: time.Unix(1470044176, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDetailedHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x93\xc1\x8e\xa3\x30\x0c\x86\xcf\xed\x53\x78\xfb\x00\x44\xbd\x56\xd9\x5c\xba\xc7\x6a\x77\x35\xd3\x79\x80\x00\x2e\x49\x05\x24\x4a\xcc\x8c\x10\xe2\xdd\x47\x21\x05\x85\x8a\xce\x09\xe3\x7c\xf9\xff\xc4\xb1\xf9\xaf\xd2\x14\xd4\x5b\x04\x45\x4d\x2d\xf6\x3c\x7e\x76\x5c\xa1\x2c\xc3\x97\xcd\x41\x6e\xca\x5e\xec\x77\x3b\xae\x8e\xe2\xa2\x3d\x81\xb9\x41\xd3\x83\xb1\xd8\x82\x37\x9d\x2b\x10\x0a\xd3\x92\xd3\x79\x47\xda\xb4\x9e\x33\x75\x9c\x78\x2b\xb8\x16\xff\x3e\xd1\xc9\xba\x86\x61\x80\xec\xbd\x6b\x1a\xe9\xfa\xec\x6a\x48\xd6\xe7\x74\x0f\x8c\xe3\x5a\x04\x74\xbb\xda\xf2\xdf\x99\x3b\x16\x74\x36\x5d\x4b\x01\xb6\xf1\xdf\x73\xa6\x05\x67\x36\xf8\x0d\x03\x38\xd9\x56\x08\xd9\xb3\x74\x5c\xd4\x37\x98\x65\xb2\x8f\xb7\x4b\xcc\xf3\x5c\x70\x09\xca\xe1\xed\xf7\x21\xf8\xad\x81\x83\x48\x73\x7f\x65\x83\x30\x8e\x9c\x49\xc1\x59\xfe\xb0\xc4\xda\xe3\x22\xb5\x49\x2f\x64\x5b\x46\x30\xa0\x8e\x89\x29\x7a\x3a\xd7\x1f\xf4\x85\xd3\x36\x1c\x7c\x66\x53\xcd\x8d\xe5\x95\x54\x62\x11\x85\x2b\x0a\xd5\x08\x35\x3b\xce\x0b\x93\xe0\x52\xc7\x55\xd1\x17\x99\xe5\x4e\x3f\xe1\x1b\xa6\x2f\xef\x75\x95\x95\x9f\xa1\x10\x9f\x66\xe8\xf1\x62\x5b\x5c\x30\x4e\xe2\x57\x36\x1b\xf9\x34\xcb\xb5\x38\x3b\x94\x84\x25\x98\xa9\xa5\x6c\x47\xa5\xa4\x70\x3f\xf8\xd2\xa4\x60\x79\x7e\x45\x64\xfd\x89\xb1\x4a\x93\xea\xf2\xac\x30\x0d\xbb\x77\xb9\xac\x15\xab\xd2\x22\x1d\x44\xb5\xee\xf6\xd0\x0d\x7a\x9a\x98\x38\x29\x9c\xc5\x51\xfa\x0e\x00\x00\xff\xff\xe0\xd3\x08\xa6\x62\x03\x00\x00")

func templatesDetailedHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesDetailedHtml,
		"templates/detailed.html",
	)
}

func templatesDetailedHtml() (*asset, error) {
	bytes, err := templatesDetailedHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/detailed.html", size: 866, mode: os.FileMode(420), modTime: time.Unix(1496871470, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/default.html": templatesDefaultHtml,
	"templates/detailed.html": templatesDetailedHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"default.html": &bintree{templatesDefaultHtml, map[string]*bintree{}},
		"detailed.html": &bintree{templatesDetailedHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

